version: "3.5"

services:
  web:
    env_file:
      - .env
    build:
      context: ./web
      args:
        ELASTIC_SEARCH_SERVER: $ELASTIC_SEARCH_SERVER
        CONTACT_MESSAGE_RELAY_URL: $CONTACT_MESSAGE_RELAY_URL
        RECAPTCHA_KEY: $RECAPTCHA_KEY
        MEDIA_URL: $MEDIA_URL
        API_URL: $API_URL
    image: xram_memory/web
    container_name: "xram_memory_web"
    tmpfs:
      - /tmp
    restart: always
    networks:
      - web
    labels:
      - "traefik.frontend.rule=Host:${DOMAIN}"

  es-node1:
    image: amazon/opendistro-for-elasticsearch:0.8.0
    container_name: es-node1
    environment:
      - cluster.name=xram-memory
      - bootstrap.memory_lock=true # along with the memlock settings below, disables swapping
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m" # minimum and maximum Java heap size, recommend setting both to 50% of system RAM
      - network.host=0.0.0.0 # required if not using the demo Security configuration
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es-data1:/usr/share/elasticsearch/data
      #- ./root-ca.pem:/usr/share/elasticsearch/config/root-ca.pem
      #- ./esnode.pem:/usr/share/elasticsearch/config/esnode.pem
      #- ./esnode-key.pem:/usr/share/elasticsearch/config/esnode-key.pem
      #- ./kirk.pem:/usr/share/elasticsearch/config/kirk.pem
      #- ./kirk-key.pem:/usr/share/elasticsearch/config/kirk-key.pem
      - ./elastic_search/custom-elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - ./elastic_search/internal_users.yml:/usr/share/elasticsearch/plugins/opendistro_security/securityconfig/internal_users.yml
    labels:
      - "traefik.frontend.rule=Host:es1-${DOMAIN}"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.docker.network=web"
      - "traefik.port=9200"
    networks:
      - internal
      - web

  webadmin:
    build: ./webadmin
    image: xram_memory/webadmin
    container_name: "xram_memory_webadmin"
    env_file:
      - .env
    environment:
      - DATABASE_URL=mysql://xram_user:xram_password@xram_memory_db:3306/xram_memory
    tmpfs:
      - /tmp
    restart: always
    volumes:
      - media/:/app/media/
      - static/:/app/staticfiles/
    networks:
      - web
      - internal
    labels:
      - "traefik.frontend.rule=Host:${DOMAIN};PathPrefix:/admin/,/api/v1/,/filer/,/tags_input/"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.docker.network=web"

  database:
    image: library/mariadb
    container_name: "xram_memory_db"
    tmpfs:
      - /tmp
    restart: always
    environment:
      - MYSQL_DATABASE=xram_memory
      - MYSQL_USER=xram_user
      - MYSQL_PASSWORD=xram_password
      - MYSQL_ROOT_PASSWORD=root_pswwd
    volumes:
      - database/:/var/lib/mysql
    networks:
      - internal
    labels:
      - traefik.enable=false
    ports:
      - 3306

  files:
    image: kyma/docker-nginx
    container_name: "xram_memory_files"
    env_file:
      - .env
    tmpfs:
      - /tmp
    restart: always
    volumes:
      - media/:/var/www/media/
      - static/:/var/www/static/
    networks:
      - web
    labels:
      - "traefik.frontend.rule=Host:${DOMAIN};PathPrefix:/static/,/media/"

  celery-worker-1:
    build: ./celery_worker
    image: xram_memory/celery_worker
    container_name: "xram_memory_celery_worker_1"
    tmpfs:
      - /tmp
    restart: always
    env_file:
      - .env
    environment:
      - DATABASE_URL=mysql://xram_user:xram_password@xram_memory_db:3306/xram_memory
    volumes:
      - media/:/app/media/
    networks:
      - internal
    labels:
      - traefik.enable=false

  redis:
    image: wodby/redis:4.0
    container_name: xram_memory_redis
    restart: always
    networks:
      - internal
    sysctls:
      net.core.somaxconn: '511'
    ports:
      - 6379
    labels:
      - traefik.enable=false

  reverse-proxy:
    image: traefik # The official Traefik docker image
    command: --api --docker # Enables the web UI and tells Traefik to listen to docker
    ports:
      - "80:80"     # The HTTP port
      - "8080:8080" # The Web UI (enabled by --api)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # So that Traefik can listen to the Docker events
    networks:
      web:
        aliases:
          - xram-memory.local # TODO: remover em produção?
          - es1-xram-memory.local # TODO: remover em produção?
  
  contact_message_relay:
    build: ./contact_message_relay
    image: xram_memory/contact_message_relay
    container_name: "xram_memory_contact_mr"
    env_file:
      - .env
      - contact_message_relay.env
    tmpfs:
      - /tmp
    restart: always
    networks:
      - web
    labels:
      - "traefik.frontend.rule=Host:contact-${DOMAIN}"


networks:
  web:
    external: true
  internal:
    internal: true

volumes:
  media:
    external:
      name: xram_memory_webadmin_media

  static:
    external:
      name: xram_memory_webadmin_static

  database:
    external:
      name: xram_memory_db_data

  es-data1:
    external:
      name: xram_memory_es1_data