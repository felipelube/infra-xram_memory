version: "3.5"

services:
  web:
    env_file:
      - .env
    build:
      context: ./web
      args:
        ELASTIC_SEARCH_CREDENTIALS: $ELASTIC_SEARCH_CREDENTIALS
        ELASTIC_SEARCH_SERVER: $ELASTIC_SEARCH_SERVER
        CONTACT_MESSAGE_RELAY_URL: $CONTACT_MESSAGE_RELAY_URL
        RECAPTCHA_KEY: $RECAPTCHA_KEY
        MEDIA_URL: $MEDIA_URL
        API_URL: $API_URL
    image: xram_memory/web
    container_name: "xram_memory_web"
    depends_on:
      - webadmin
    tmpfs:
      - /tmp
    restart: always
    networks:
      - web
    environment:
      ELASTIC_SEARCH_SERVER: $ELASTIC_SEARCH_SERVER
      ELASTIC_SEARCH_CREDENTIALS: $ELASTIC_SEARCH_CREDENTIALS
      CONTACT_MESSAGE_RELAY_URL: $CONTACT_MESSAGE_RELAY_URL
      RECAPTCHA_KEY: $RECAPTCHA_KEY
      MEDIA_URL: $MEDIA_URL
      API_URL: $API_URL
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.xram_memory_web.rule=Host(`$DOMAIN`)"
      - "traefik.http.routers.xram_memory_web.entrypoints=https"
      - "traefik.http.routers.xram_memory_web.tls.certResolver=lets"

  es-node1:
    image: amazon/opendistro-for-elasticsearch:0.8.0
    container_name: es-node1
    restart: always
    environment:
      - cluster.name=xram-memory
      - bootstrap.memory_lock=true # along with the memlock settings below, disables swapping
      - "ES_JAVA_OPTS=-Xms1024m -Xmx1024m" # minimum and maximum Java heap size, recommend setting both to 50% of system RAM
      - network.host=0.0.0.0 # required if not using the demo Security configuration
    ulimits:
      memlock:
        soft: -1
        hard: -1
    env_file:
      - .env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.xram_memory_es1.rule=Host(`$ES_DOMAIN`)"
      - "traefik.http.routers.xram_memory_es1.entrypoints=https"
      - "traefik.http.routers.xram_memory_es1.tls.certResolver=lets"
    volumes:
      # volume com os dados
      - es-data1:/usr/share/elasticsearch/data
      # autoridade certificadora
      - ./elastic_search/certificates/out/root-ca.pem:/usr/share/elasticsearch/config/root-ca.pem
      # certificados da REST api
      - ./elastic_search/certificates/out/es-node1.pem:/usr/share/elasticsearch/config/esnode.pem
      - ./elastic_search/certificates/out/es-node1.key:/usr/share/elasticsearch/config/esnode-key.key
      # certificados de transporte
      - ./elastic_search/certificates/out/es-node1_http.pem:/usr/share/elasticsearch/config/esnode_http.pem
      - ./elastic_search/certificates/out/es-node1_http.key:/usr/share/elasticsearch/config/esnode-key_http.key
      # certificados administrativos
      - ./elastic_search/certificates/out/kirk.pem:/usr/share/elasticsearch/config/kirk.pem
      - ./elastic_search/certificates/out/kirk-key.pem:/usr/share/elasticsearch/config/kirk-key.pem
      # configuração geral
      - ./elastic_search/custom-elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      # papéis e usuários
      - ./elastic_search/roles.yml:/usr/share/elasticsearch/plugins/opendistro_security/securityconfig/roles.yml
      - ./elastic_search/roles_mapping.yml:/usr/share/elasticsearch/plugins/opendistro_security/securityconfig/roles_mapping.yml
      - ./elastic_search/internal_users.yml:/usr/share/elasticsearch/plugins/opendistro_security/securityconfig/internal_users.yml
    networks:
      - internal
      - web

  webadmin:
    build: ./webadmin
    image: xram_memory/webadmin
    container_name: "xram_memory_webadmin"
    env_file:
      - .env
      - backend.env
    tmpfs:
      - /tmp
    restart: always
    depends_on:
      - database
      - es-node1
    volumes:
      - media/:/app/media/
      - static/:/app/staticfiles/
    networks:
      - web
      - internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.xram_memory_webadmin.rule=Host(`$DOMAIN`) && PathPrefix(`/admin/`,`/api/v1/`,`/filer/`,`/tags_input/`)"
      - "traefik.http.routers.xram_memory_webadmin.entrypoints=https"
      - "traefik.http.routers.xram_memory_webadmin.tls.certResolver=lets"

  database:
    image: postgres:11.6-alpine
    container_name: "xram_memory_db"
    tmpfs:
      - /tmp
    restart: always
    env_file:
      - backend.env
    volumes:
      - database/:/var/lib/postgresql/data
    networks:
      - internal

  files:
    image: kyma/docker-nginx
    container_name: "xram_memory_files"
    env_file:
      - .env
    tmpfs:
      - /tmp
    restart: always
    volumes:
      - media/:/var/www/media/
      - static/:/var/www/static/
    networks:
      - web
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.xram_memory_files.rule=Host(`$DOMAIN`) && PathPrefix(`/static/`,`/media/`)"
      - "traefik.http.routers.xram_memory_files.entrypoints=https"
      - "traefik.http.routers.xram_memory_files.tls.certResolver=lets"


  celery-worker:
    build: ./celery_worker
    image: xram_memory/celery_worker
    tmpfs:
      - /tmp
    restart: always
    depends_on:
      - rabbitmq
      - es-node1
      - database
    env_file:
      - .env
      - backend.env
    volumes:
      - media/:/app/media/
    networks:
      - internal

  rabbitmq:
    image: rabbitmq:3-alpine
    container_name: xram_memory_rabbitmq
    restart: always
    environment:
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit log_levels [{connection,error}]
    networks:
      - internal

  contact_message_relay:
    build: ./contact_message_relay
    image: xram_memory/contact_message_relay
    container_name: "xram_memory_contact_mr"
    env_file:
      - .env
      - contact_message_relay.env
    tmpfs:
      - /tmp
    restart: always
    networks:
      - web
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.xram_memory_contact.rule=Host(`$CONTACT_MESSAGE_RELAY_DOMAIN`)"
      - "traefik.http.routers.xram_memory_contact.entrypoints=https"
      - "traefik.http.routers.xram_memory_contact.tls.certResolver=lets"

  backup:
    image: xram_memory/backup:alpine-3.10
    build: ./backup
    container_name: xram_memory_backup
    restart: unless-stopped
    volumes:
      - media:/mnt/source/media:ro
      - borg-repo:/mnt/borg-repository
      - ./backup/data/.config:/etc/borgmatic.d
      - borg-cache:/root/.cache/borg
    networks:
      - internal

networks:
  web:
    external: true
  internal:

volumes:
  media:
    external:
      name: xram_memory_webadmin_media

  static:
    external:
      name: xram_memory_webadmin_static

  database:
    external:
      name: xram_memory_db_data

  es-data1:
    external:
      name: xram_memory_es1_data

  borg-repo:
    external:
      name: xram_memory_backup_repo

  borg-cache:
    external:
      name: xram_memory_backup_cache
